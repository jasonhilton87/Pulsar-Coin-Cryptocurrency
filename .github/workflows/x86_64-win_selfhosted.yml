name: x86_64-win_selfhosted

on:
  workflow_dispatch:
  push:  


jobs:
  build:
    name: ${{ matrix.name }}

    env:
      MAKEJOBS: "-j20"
      CHECK_DOC: "0"
      CCACHE_SIZE: "100M"
      CCACHE_TEMPDIR: /tmp/.ccache-temp
      CCACHE_COMPRESS: "1"
      PYTHON_DEBUG: "1"
      WINEDEBUG: fixme-all
      SDK_URL: https://bitcoincore.org/depends-sources/sdks
      VERSION: "1.1.7.1"
      RELEASE_NAME: "$GITHUB_WORKFLOW"
      RELEASE_TAG: "1.1.7.1"

    strategy:
      fail-fast: false
      matrix:
        name:
          - x86_64-win

        include:
          - name: x86_64-win
            host: x86_64-w64-mingw32
            arch: "i386"
            os: ubuntu-22.04
            packages: python3 nsis g++-mingw-w64-x86-64 wine64 bc wine-binfmt
            postinstall: |
              sudo update-alternatives --set x86_64-w64-mingw32-gcc  /usr/bin/x86_64-w64-mingw32-gcc-posix
              sudo update-alternatives --set x86_64-w64-mingw32-g++  /usr/bin/x86_64-w64-mingw32-g++-posix
              sudo update-binfmts --import /usr/share/binfmts/wine
            run-tests: false
            dep-opts: ""
            config-opts: "--disable-shared --enable-gui=qt6 BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I${BDB_PREFIX}/include\""
            goal: install
            strip-cmd: "x86_64-w64-mingw32-strip"

    runs-on: self-hosted
    #runs-on: ${{ matrix.os }}

    steps:
      - name: Add architecture
        if: ${{ matrix.arch }}
        run: |
          sudo dpkg --add-architecture "${{ matrix.arch }}"
  
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3 rsync git procps bison
          sudo apt-get install ${{ matrix.packages }}

      - name: Post install
        if: ${{ matrix.postinstall }}
        run: ${{ matrix.postinstall }}

      - name: Checkout
        uses: actions/checkout@v4



      - name: Restore CCache
        id: ccache-restore
        uses: actions/cache/restore@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.name }}-${{ hashFiles('**/configure.ac') }}
          restore-keys: |
              ccache-${{ runner.os }}-${{ matrix.name }}-
           
      - name: Ensure Cache Directory Exists
        run: mkdir -p depends/built

      - name: Restore Dependencies Cache
        id: cache-depends-restore
        uses: actions/cache/restore@v4
        with:
          #path: depends/built
          path: depends
          key: dependencies-${{ runner.os }}-${{ matrix.name }}-${{ hashFiles('depends/packages/*') }}
          restore-keys: |
            dependencies-${{ runner.os }}-${{ matrix.name }}-

      - name: Check contents of depends/built
        run: |
            ls -l depends/built


      - name: Build depends
        if: steps.cache-depends-restore.outputs.cache-hit != 'true'
        id: Build_Depends
        run: |
          make ${{ env.MAKEJOBS }} -C depends HOST=${{ matrix.host }} ${{ matrix.dep-opts }}
        #continue-on-error: true

      - name: Check contents of depends/built after bulid
        run: |
            ls -l depends/built

      - name: Save Dependencies Cache
        if: always() && steps.cache-depends-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          #path: depends/built
          path: depends
          key: dependencies-${{ runner.os }}-${{ matrix.name }}-${{ hashFiles('depends/packages/*') }}
          #save-always: true

      - name: Debug Cache Key
        run: |
            echo "Cache Key: dependencies-${{ runner.os }}-${{ matrix.name }}-${{ hashFiles('depends/packages/*') }}"

      - name: Debug Cache Hit
        run: |
            echo "Cache hit: ${{ steps.cache-depends-restore.outputs.cache-hit }}"
      
      - name: Save CCache
        if: always() && steps.ccache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.name }}-${{ hashFiles('**/configure.ac') }}

      - name: Build Pulsar Core
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/${{ matrix.host }} ${{ matrix.config-opts }} || ( cat config.log && false)
          make ${{ env.MAKEJOBS }} ${{ matrix.goal }} || ( echo "Build failure. Verbose build follows." && make ${{ matrix.goal }} V=1 ; false )

          
      - name: Strip built binaries
        run: |
          ${{ matrix.strip-cmd }} depends/${{ matrix.host }}/bin/pulsard* src/qt/pulsar-qt* src/pulsar-cli* src/pulsar-tx* dist/Pulsar-Qt.app* || ( echo "Failed stripping builds. The build will have a bigger file size" )
          
      - name: Move to release
        run: |
          mkdir release
          cp depends/${{ matrix.host }}/bin/pulsard* release/
          cp src/qt/pulsar-qt* release/
          cp src/pulsar-cli* release/
          cp src/pulsar-tx* release/
        continue-on-error: true
            
      - name: Upload artifacts WIN/OSX
        if: |
          matrix.name == 'x86_64-macos' ||
          matrix.name == 'x86_64-win'
        uses: actions/upload-artifact@v4
        with:
          name: Pulsar-${{ env.VERSION }}-${{ matrix.name }}
          path: |
            release/pulsard*
            release/pulsar-qt.exe
            release/pulsar-cli.exe
      
